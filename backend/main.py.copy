from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from azure.storage.blob import BlobServiceClient
from azure.cognitiveservices.vision.computervision import ComputerVisionClient
from msrest.authentication import CognitiveServicesCredentials
import pyodbc
import os, uuid, datetime, json, io
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Azure Blob
STORAGE_CONN_STR = os.environ["AZURE_STORAGE_CONNECTION_STRING"]
STORAGE_CONTAINER = os.environ.get("AZURE_STORAGE_CONTAINER", "images")
blob_service = BlobServiceClient.from_connection_string(STORAGE_CONN_STR)

# Computer Vision (object detection)
VISION_ENDPOINT = os.environ["VISION_ENDPOINT"]
VISION_KEY      = os.environ["VISION_KEY"]
cv_client = ComputerVisionClient(
    VISION_ENDPOINT,
    CognitiveServicesCredentials(VISION_KEY)
)

# SQL
SQL_CONN = os.environ["AZURE_SQL_CONNECTIONSTRING"]

@app.post("/upload")
async def upload_image(file: UploadFile = File(...)):
    # 1) Read & upload
    unique_name = f"{uuid.uuid4()}_{file.filename}"
    data = await file.read()
    blob = blob_service.get_blob_client(STORAGE_CONTAINER, unique_name)
    blob.upload_blob(data, overwrite=True)
    blob_url = blob.url

    # 2) Detect objects â€” wrap bytes in BytesIO!
    stream = io.BytesIO(data)
    detect = cv_client.detect_objects_in_stream(stream)
    tags = []
    for obj in detect.objects:
        r = obj.rectangle
        tags.append({
            "name":       obj.object_property,
            "confidence": obj.confidence,
            "bbox": {
                "left":   r.x,
                "top":    r.y,
                "width":  r.w,
                "height": r.h
            }
        })

    print("[DEBUG]: Detected tags: ", tags)

    # 3) Persist & return
    now      = datetime.datetime.utcnow()
    tags_json = json.dumps(tags, ensure_ascii=False)
    conn     = pyodbc.connect(SQL_CONN)
    cur      = conn.cursor()
    cur.execute(
        "INSERT INTO images (file_name, blob_url, uploaded_at, tags) VALUES (?, ?, ?, ?)",
        (unique_name, blob_url, now, tags_json)
    )
    conn.commit()
    conn.close()

    return {"url": blob_url, "tags": tags}


@app.get("/history")
async def get_history():
    conn = pyodbc.connect(SQL_CONN)
    cur  = conn.cursor()
    cur.execute("""
        SELECT blob_url, uploaded_at, tags
        FROM images
        ORDER BY uploaded_at DESC
    """)
    rows = cur.fetchall()
    conn.close()

    history = []
    for url, ts, tags_json in rows:
        history.append({
            "url":         url,
            "uploadedAt":  ts.isoformat(),
            "tags":        json.loads(tags_json or "[]")
        })
    return history
